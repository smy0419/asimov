package test

import (
	"fmt"
	"github.com/AsimovNetwork/asimov/asiutil"
	"github.com/AsimovNetwork/asimov/blockchain"
	"github.com/AsimovNetwork/asimov/chaincfg"
	"github.com/AsimovNetwork/asimov/common"
	"github.com/AsimovNetwork/asimov/database/dbimpl/ethdb"
	"github.com/AsimovNetwork/asimov/protos"
	"github.com/AsimovNetwork/asimov/vm/fvm"
	"github.com/AsimovNetwork/asimov/vm/fvm/abi"
	"github.com/AsimovNetwork/asimov/vm/fvm/core/state"
	"github.com/AsimovNetwork/asimov/vm/fvm/core/vm"
	"math/big"
	"strings"
	"testing"
	"time"
)

func TestUnPackResult(t *testing.T) {
	block := protos.MsgBlock{
		Header: protos.BlockHeader{
			Height:    1,
			Timestamp: time.Now().Unix(),
		},
	}


	// Account address
	address := common.HexToAddress("0x948ab52cc7b5107efd4b03a51f0d1688b4a49a54")

	// FVM Context
	// bc := newBlockChain()
	bc := &blockchain.BlockChain{}
	context := fvm.NewFVMContext(address, new(big.Int).SetInt64(1), asiutil.NewBlock(&block), bc, nil, nil)

	db := ethdb.NewMemDatabase()
	stateDB, _ := state.New(common.Hash{}, state.NewDatabase(db))

	// FVM
	vmenv := vm.NewFVM(context, stateDB, chaincfg.ActiveNetParams.FvmParam, *bc.GetVmConfig())

	// contract creator
	sender := vm.AccountRef(address)
	// code := common.Hex2Bytes("608060405234801561001057600080fd5b506040516102a83803806102a8833981018060405281019080805182019291905050508060009080519060200190610049929190610050565b50506100f5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061009157805160ff19168380011785556100bf565b828001600101855582156100bf579182015b828111156100be5782518255916020019190600101906100a3565b5b5090506100cc91906100d0565b5090565b6100f291905b808211156100ee5760008160009055506001016100d6565b5090565b90565b6101a4806101046000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063954ab4b214610046575b600080fd5b34801561005257600080fd5b5061005b6100d6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561009b578082015181840152602081019050610080565b50505050905090810190601f1680156100c85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606060008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561016e5780601f106101435761010080835404028352916020019161016e565b820191906000526020600020905b81548152906001019060200180831161015157829003601f168201915b50505050509050905600a165627a7a723058203301ef54e16b133c1d5ccfec6c93620b1d958eed02ca86302c21b972c62205700029")
	// ode += construct
	/*
		how to encode
		1. install rust：curl https://sh.rustup.rs -sSf | sh
		2. install ethabi：cargo install ethabi-cli
		3. ethabi encode params -v string "Hello World"
	*/
	code := common.Hex2Bytes("")
	res, addr, returnGas, _, err := vmenv.Create(
		sender,
		code,
		uint64(4604216),
		common.Big0,
		&protos.Asset{},
		nil, nil, false,
	)

	if err != nil {
		panic(err)
	}

	fmt.Println(res)
	fmt.Println(addr)
	fmt.Println(returnGas)

	callCode := common.Hex2Bytes("3cf0a6e7")
	ret, leftGas, _, err := vmenv.Call(sender, addr, callCode, uint64(999999999), common.Big0, &protos.Asset{}, false)
	fmt.Println(leftGas)
	fmt.Println("Contract's result is : ")

	abiStr := `[
	{
		"constant": false,
		"inputs": [
			{
				"name": "_name",
				"type": "string"
			}
		],
		"name": "deleteArray",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_key",
				"type": "string"
			}
		],
		"name": "deleteKey",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_name",
				"type": "string"
			}
		],
		"name": "put",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"name": "_greeting",
				"type": "string"
			},
			{
				"name": "_parent",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "index",
				"type": "uint256"
			}
		],
		"name": "getTemplate",
		"outputs": [
			{
				"name": "",
				"type": "string"
			},
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "greeting",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"name": "names",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "parent",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "say",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "testReturnTemplate",
		"outputs": [
			{
				"name": "",
				"type": "string"
			},
			{
				"name": "",
				"type": "uint8"
			},
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "testReturnValue",
		"outputs": [
			{
				"name": "",
				"type": "uint32"
			},
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	}
]`
	definition, err := abi.JSON(strings.NewReader(abiStr))
	outType := &[]interface{}{new(string), new(uint8), new(bool)}
	err = definition.Unpack(outType, "testReturnTemplate", ret)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(*((*outType)[0]).(*string))
	fmt.Println(*((*outType)[1]).(*uint8))
	fmt.Println(*((*outType)[2]).(*bool))
}
